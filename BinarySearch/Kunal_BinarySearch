//Binary search in array

Question1. Ceiling in array //ceilling means return the smallest greater number than target or greater or equal to the target element 

public class CeilingNum {
    public static void main(String[]args ){
        int []nums={2,3,4,5,7,9,12,15,17};
        int target =1;
       int ans= Ceilling(nums,target);
       System.out.println(ans);
    }

    //ceilling means return the smallest greater number than target or greater or equal to the target element 
    public static int Ceilling(int[]nums,int target){
        if(target>nums[nums.length-1]){
            return -1;
        }
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==nums[mid]){
                return mid;
            }
           else  if(target<nums[mid]){
            end=mid-1;
           }
           else{
            start=mid+1;
           }
        }
        return start;
    } 
    
}

-----------------------------------

question 2. floor in array
-->
public class FloorNum {
    public static void main(String[]args ){
        int []nums={2,3,4,5,7,9,10};
        int target =6;
       int ans= FloorN(nums,target);
       System.out.println(ans);
    }

    //flooring means return the greatest smaller number than target or smaller or equal to the target element 
    public static int FloorN(int[]nums,int target){
        // if(target>nums[nums.length-1]){
        //     return -1;
        // }
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==nums[mid]){
                return mid;
            }
           else  if(target<nums[mid]){
            end=mid-1;
           }
           else{
            start=mid+1;
           }
        }
        return end;
    } }
    
    ------------------------------------
    
    Question 3. find first and last position in sorted array
    import java.util.Arrays;

public class FirstlastPos {

    public static void main(String[]args ){
        int []nums={2,3,4,4,4,4,5,7,9,10};
        int target =4;
       int[] ans= searchRange(nums,target);
       System.out.println(Arrays.toString(ans));
    }

static int[] searchRange(int[] nums,int target){
    int[] ans={-1,-1};
    ans[0]=search(nums,target,true);
    ans[1]=search(nums,target,false);
    return ans;
}

static int search(int[]nums,int target,Boolean FindFirstIndex){
    int ans=-1;
    int start=0;
    int end=nums.length-1;
    while(start<=end){
        int mid=start+(end-start)/2;

        if(target==nums[mid]){
            ans=mid;
            if(FindFirstIndex){
                end =mid-1;
            }
            else {
                start=mid+1;
            }

        }
        else  if(target<nums[mid]){
            end=mid-1;
        }
        else {
            start=mid+1;
        } }
    return ans;}}
    
    ------------------------------------------
    question 4. //Given a characters array letters that is sorted in non-decreasing order and 
//a character target, return the smallest character in the array that is larger than target.
class SmallerChar{
    public static void main(String[] args){
        char[] letters={'c','f','j'};
        char target='f';
       char ans = nextGreatestLetter(letters, target);
       System.out.println(ans);
    }

    public static char nextGreatestLetter(char[] letters, char target) {
        int start=0;
        int end=letters.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target<letters[mid]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return (letters[start%letters.length]);
        
    }
}

-------------------------

question .5

////A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.//

class Solution {
    public int findPeakElement(int[] nums) {
        int start=0;
        int end=nums.length-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(nums[mid]>nums[mid+1]){
                end=mid;
            }
            else {
                start=mid+1;
            }
        }
        return start;
        
    }
}
